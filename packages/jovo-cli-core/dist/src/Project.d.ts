import { AppFile, JovoCliPlatform, JovoConfig, JovoModel, PackageVersion } from './';
export declare class Project {
    projectPath: string;
    frameworkVersion: number;
    constructor();
    init(frameworkVersion?: number): Promise<void>;
    downloadAndExtract(projectName: string, template: string, locale: string): Promise<string>;
    downloadTemplate(projectPath: string, template: string, locale: string): Promise<string>;
    getConfigContent(stage?: string): AppFile;
    getConfig(stage?: string): AppFile;
    getConfigPath(): string;
    getConfigFileName(): string;
    getConfigParameter(path: string, stage: string): string | undefined;
    hasConfigFile(): boolean;
    hasExistingProject(directory: string): boolean;
    hasModelFiles(locales?: string[]): boolean;
    getLocales(locale?: string | string[]): string[];
    getModelFileContent(locale: string): Promise<string>;
    getModel(locale: string): JovoModel;
    backupModel(locale: string): Promise<void>;
    getModelPath(locale: string): string;
    getPlatformsPath(): string;
    getProjectPath(): string;
    getProjectName(): string | undefined;
    getEndpoint(endpointType: string): Promise<string>;
    getOrCreateJovoWebhookId(): string;
    getEndpointFromConfig(endpoint: string): string;
    getWebhookUuid(): string;
    getStage(stage: string): string;
    createEmptyProject(): Promise<string>;
    getModelsPath(): string;
    loadJovoConfig(): JovoConfig;
    updateConfigV1(data: object): Promise<void>;
    updateInvocation(invocation: string, locale: string): Promise<void>;
    updateModelLocale(locale: string): Promise<void>;
    setPlatformDefaults(platform: JovoCliPlatform): Promise<void>;
    runNpmInstall(): Promise<void>;
    runNpmInstallVersion(): Promise<void>;
    getJovoFrameworkVersion(): Promise<PackageVersion>;
    saveModel(model: JovoModel, locale: string): Promise<void>;
    moveTempJovoConfig(pathToSrc: string): Promise<void>;
    deleteTempJovoConfig(pathToSrc: string): Promise<void>;
    saveJovoConfig(config: JovoConfig): void;
    saveJovoWebhookToConfig(): string;
    setProjectPath(projectName: string): string;
    unzip(pathToZip: string, pathToFolder: string): Promise<string>;
}
export declare function getProject(): Project;
